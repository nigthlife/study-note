
1. 基本类型指针 // 重要

%#X 表示以十六进制形式输出，并附带前缀0X

C语言有一个控制符%P 专门用来以十六进制形式输出地址

#include<stdio.h>
int main()
{
	int * p; //p是变量的名字 ， 
	         //int * 表示p变量存放的是int 类型的变量的地址
	int i = 3;
	int * p;  // int * 才是数据类型  int * 是只能存放int类型的变量地址， 
			  // p才是它的名字  不表示定义了一个名字叫*p的变量
			  // int * p: 应该这样理解：p是变量名，p变量的数据类型是int* 类型
			  //		  所谓int * 类型实际就是存放int变量地址的类型
 
	p = i ; // 错误，因为类型不一致， p只能存放int类型的变量地址，
			// 不能存放interesting
	
	p = &i;
		/*
		p保存了i的地址，因此p只向i；
		p不是i， i也不是p ，更准确的说； 
		修改p的值不影响i的值，修改i的值也影响p的值
				
		2.指针和地址是一个概念，i的地址也可以叫i的指针，
		       可以叫指针变量也可以叫地址变量
		3. 如果一个指针变量指向了某个普通变量，则 * 指针变量 
		就完全等同于 普通变量
		
		  例子：
				如果p是个指针变量：并且p存放了普通变量i的地址
				则p指向了普通变量i
				
				  *p 就完全等同于 i；
				  或者说： 在所有出现*p的地方都可以替换成i 
						   在所有出现i的地方督可以替换成*p
			*p 就是以p的内容为地址的变量

		
	j = %i;  // 等价于 j = i；

	// 1.指针就是地址、 地址就是指针
	// 2.地址就是内存单元的编号
	// 3.指针变量是存放地址的变量
	// 4.指针和指针变量是俩个不同概念
	// 5.但是要注意：我们通常叙述时会吧指针变量简称指针，实际它们含义并不一样

	return 0;
} 

指针：
	指针重要性：
		 表示一些复杂的数据结构
	  	 快速的传递数据
		 使函数返回一个以上的值
		 能直接访问硬件
		 能够方便的处理字符串
		 是理解面向对象语言中引用的基础

	指针分类：

		1. 基本类型指针 // 重要
		 * p表示的是以p的内容为地址的变量

		2. 指针和数组
		
		3. 指针和函数

		4. 指针和结构体 // 重要

		5.多级指针 
		
	指针的定义：
		地址
				内存单元的编号
				从零开始的非负整数
	* 的含义：
			2.定义指针变量
				int * p；
	// 定义了一个名字叫p 变量，int * 表示p只能存放int变量

			3.指针运算符
				该运算符放在已经定义好的指针变量的前面
			如果p 是一个已经定义好的指针变量
			则*p表示以p 的内容为地址的变量
		一维数组是一个指针常量
			它存放的是一维数组的第一个元素的地址
			a[5]  a是数组名，5是数组元素的个数，元素就是变量

			确定一个一维数组需要几个

（1）内存中字节的编号称为地址，或者指针，地址从0开始依次增加，
      对于32位环境，程序能够使用的内存为4GB，最小地址为0，最大的地址为0XFFFFFFFF

（2）数据和代码都以二进制的形式存储在内存中

（3）拥有读取和执行权限的内存块就是代码，而拥有读取和写入权限的内存块是数据

（4）CPU访问内存时需要的是地址，不是变量名和函数名，这俩个只是地址的一种
助记符，当源文件被编译和链接成可执行程序后，它们都会被替换成地址
编译和链接过程的一项重要任务就是找到这些名称所对应的地址

（5）


