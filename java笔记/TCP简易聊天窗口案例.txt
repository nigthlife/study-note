

1.需要的四个类：服务器端、客户端、消息类、消息类型类
2.消息类：
	1.创建发送者名称（from）
	2.创建发送给谁的名称（to）
	3.创建消息类型
	4.要发送的消息内容（info）
	5.实现Serializable接口
	
	
	
3.服务器端：
	1>. 创建服务器端，设置端口号，定义客户端处理线程的集合同意管理线程
	2>. 创建用户线程，传入集合对象，传入Socket服务器对象
	3>. 创建一个名字为客户端的名称（唯一），或者专门创建一个名称类
		实现用户登录
	4>.	然后开启线程池，创建用户线程对象，其中使用while循环，
		使其一直在运行
	5>.	然后用户线程构造方法将当前对象添加入集合中
	6>. 然后创建输入输出流，并封装
	7>. 提示语句:输出连接的客户端地址
	8>. 然后在try语句内创建对象流，获取socket中的对象内容
	9>. 创建while循环，开始读取
	10. 使用输入流读取读取数据，并使用对象流进行反序列化
		强制转换为消息类的类型
		返回的内容为消息类的对象
	11. 通过返回的消息类对象获取消息类对象中的消息类型属性的值
	12. 通过获取的消息类型的值进行switch判断
		判断是登录还是发生消息
	13. 然后获取客户端的发送者的名称
	14. 通过获取的的消息类对象设置info的内容，
		并使用输出流返回给客户端，使用writeObject方法
		登录消息写好
	15. 通过消息类对象获取其中发送给谁属性的值
	16. 创建一个用户线程类用户循环判断发送的对象
		是否存在，并而不能是本线程，因为本线程
		也加入了集合中，
	17. 如果相等使用当前循环到的集合调用对象流
		方法，输出消息类的info中的值，然后结束循环
	18. 关闭输入输出流
	
客户端：
	1.	创建客户端对象并指定地址和端口号
	2.	创建输入输出对象流
	3.	首先开始登陆，得向服务器发送登陆信息
	4.	创建消息类对象，并给对象中的属性赋值
	5.	完了之后通过对象输出流发送给服务器
	6.	然后对象输入流读取服务器返回的信息，返回的是一个对象
		其中有info内容和本机名称
	7.	创建一个线程不断进行读取消息的线程
		线程实现：
			1.需要读取数据，创建对象输入流input
			2.创建while循环  
			3.通过对象输入流读取服务器转发过来的信息
			  返回的是一个消息类对象
			4.然后输出对象中发送者的名称和发送者发送的信息
			5.然后设置使用if判断关闭流
			
	8.	创建单线程的线程池，并启动读取的线程
	9.	然后使用主线程实现发送消息
	10. 创建while使用主线程一直在运行
	11. 创建一个消息类对象通过Scanner输入需要发送给谁的名称‘
		在输入发送消息的类型，在输入发送消息的内容，
		最后通过对象输出流发送给服务器
		
	
	
